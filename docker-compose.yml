version: "3.9"

services:

  awt-route_engine:
    image: gisops/valhalla:latest
    container_name: valhalla_latest
    ports:
      - "8002:8002"
    volumes:
      - ./route_engine/sources/:/custom_files
    environment:
      # - tile_urls=https://download.geofabrik.de/europe/switzerland-latest.osm.pbf
      - server_threads=2  # determines how many threads will be used to run the valhalla server
      - use_tiles_ignore_pbf=True  # load existing valhalla_tiles.tar directly
      - build_elevation=False  # build elevation with "True" or "Force": will download only the elevation for areas covered by the graph tiles
      - build_admins=False  # build admins db with "True" or "Force"
      - build_time_zones=False  # build timezone db with "True" or "Force"
      - build_tar=True  # build an indexed tar file from the tile_dir for faster graph loading times
      - force_rebuild=False  # forces a rebuild of the routing tiles with "True"
    env_file:
      - .env.live

  docs:
    build:
      context: docs/.
      dockerfile: live.Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./docs:/app/src
      - /app/src/.vitepress/dist
      - /app/src/node_modules
    env_file:
      - .env.live

  awt-tile-cache:
    build: tile_caching
    env_file:
      - .env.live

  awt-mapfish:
    build: pdf_map_export/.
    ports:
      - "8080:8080"
    depends_on:
      - awt-tile-cache
    env_file:
      - .env.live

  awt-swiss-tml:
    build:
      context: swiss_TLM_api/.
      dockerfile: live.Dockerfile
    ports:
      - "1848:1848"
    volumes:
      - ./swiss_TLM_api:/app
    env_file:
      - .env.live

  awt-backend:
    build:
      context: python_program/.
      dockerfile: live.Dockerfile
    ports:
      - "5000:5000"

    volumes:
      - ./python_program:/app

    depends_on:
      - awt-mapfish
      - awt-swiss-tml
    environment:
      TZ: Europe/Zurich
    env_file:
      - .env.live

  awt-webinterface:
    build:
      context: .
      dockerfile: webinterface/live.Dockerfile
      # Used in the first stage of the Dockerfile, thus these env vars must be passed as args
      args:
        - ENVIRONMENT_FILE=.env.live

    volumes:
      - ./webinterface/src:/app/src
      # Mount git info to container
      - ./.git/HEAD:/app/.git/HEAD
      - ./.git/refs/heads/:/app/.git/refs/heads/

    ports:
      - "80:80"
    depends_on:
      - awt-backend
      - awt-route_engine
    env_file:
      - .env.live
